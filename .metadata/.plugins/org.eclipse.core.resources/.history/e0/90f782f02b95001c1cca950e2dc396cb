package com.crs.lt.controller;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.bind.annotation.RestController;

import com.crs.lt.business.UserService;

@RestController
@CrossOrigin
public class UserRestApi {

	@Autowired
	UserService userService;

	@RequestMapping(method = RequestMethod.GET, value = "/user/getName/{userId}")
	@ResponseBody
	public ResponseEntity<?> getName(@PathVariable("userId") String userId) {
		String result;
		try {
			result = userService.getName(userId);
		} catch (Exception e) {
			return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body(e.getMessage());
		}
		return ResponseEntity.status(HttpStatus.OK).body(result);
	}

	@RequestMapping(method = RequestMethod.GET, value = "/user/verifyCredentials/{userId}/{password}")
	@ResponseBody
	public ResponseEntity<?> verifyCredentials(@PathVariable("userId") String userId,
			@PathVariable("password") String password) {
		boolean result;
		try {
			result = userService.verifyCredentials(userId, password);
		} catch (Exception e) {
			return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body(e.getMessage());
		}
		return ResponseEntity.status(HttpStatus.OK).body(result);
	}

	@RequestMapping(method = RequestMethod.GET, value = "/user/getRole/{userId}")
	@ResponseBody
	public ResponseEntity<?> getRole(@PathVariable("userId") String userId) {
		String result;
		try {
			result = userService.getRole(userId);
		} catch (Exception e) {
			return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body(e.getMessage());
		}
		return ResponseEntity.status(HttpStatus.OK).body(result);
	}

	@RequestMapping(method = RequestMethod.PUT, value = "/user/updatePassword")
	@ResponseBody
	public ResponseEntity<?> updatePassword(@RequestParam("userId") String userId,
			@RequestParam("newPassword") String newPassword) {
		boolean result;
		try {
			result = userService.verifyCredentials(userId, newPassword);
		} catch (Exception e) {
			return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body(e.getMessage());
		}
		return ResponseEntity.status(HttpStatus.OK).body(result);
	}

}