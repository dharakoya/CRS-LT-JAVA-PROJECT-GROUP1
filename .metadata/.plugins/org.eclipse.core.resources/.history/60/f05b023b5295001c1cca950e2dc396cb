package com.crs.lt.controller;

import java.sql.SQLException;
import java.util.List;

import javax.ws.rs.core.MediaType;
import javax.ws.rs.core.Response;

import org.apache.log4j.Logger;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.bind.annotation.RestController;

import com.crs.lt.bean.Catalog;
import com.crs.lt.bean.Course;
import com.crs.lt.business.AdminService;
import com.crs.lt.exceptions.CourseExistsAlreadyException;
import com.crs.lt.exceptions.CourseNotDeletedException;
import com.crs.lt.exceptions.CourseNotFoundException;

@RestController
@CrossOrigin
public class AdminRestApi {

	@Autowired
	AdminService adminService;
	private static Logger logger =Logger.getLogger(AdminRestApi.class);
	
	 @RequestMapping(produces = MediaType.APPLICATION_JSON, method = RequestMethod.GET,value = "/admin/courses")
		@ResponseBody
	private List<Catalog> viewCourses() throws SQLException {
		List<Catalog> courseList = adminService.viewCourses();
		if(courseList.size() == 0) {
			logger.error("Nothing present in the catalogue!");
			//System.out.println("Nothing present in the catalogue!");
			return courseList;
		}
		logger.info("Courses present in the course catalogue!!");
		return courseList;
	}
	 
	
	 
	 @RequestMapping(produces = MediaType.APPLICATION_JSON, consumes = MediaType.APPLICATION_JSON, method = RequestMethod.POST,value = "/admin/addCourse")
		@ResponseBody
	    public Response addCourse(@RequestBody Catalog course) throws SQLException, CourseExistsAlreadyException {
	       
		 List<Catalog> courseList = adminService.viewCourses();
	        try {
	        	adminService.addCourse(course, courseList);
	        	return Response
	                    .status(200)
	                    .entity("Course Added Successfully.")
	                    .build();
	        }
	        catch(SQLException | CourseExistsAlreadyException e){
	        	logger.error(e.getMessage());
	        	 return Response
	 	                .status(400)
	 	                .entity("Course not added.")
	 	                .build();
	        }
	       
	    }
	 
	 /**
		 * /admin/deleteCourse
		 * REST-services for dropping a course from catalog
		 * @param courseCode
		 * @return
	 * @throws SQLException 
		 */
		
		 @RequestMapping(produces = MediaType.APPLICATION_JSON, method = RequestMethod.DELETE,value = "/deleteCourse/{courseCode}")
		@ResponseBody
		public Response deleteCourse(
				
				@RequestParam( value = "courseCode") String courseCode) throws SQLException {
			List<Catalog> courseList = adminService.viewCourses();
			
			try {
				
				adminService.removeCourse(courseCode, courseList);
				return Response.status(201).entity("Course with courseCode: " + courseCode + " deleted from catalog").build();
			
			} catch (CourseNotFoundException| CourseNotDeletedException | SQLException e) {
				
				return Response.status(409).entity(e.getMessage()).build();
			
			}	
		}

}
